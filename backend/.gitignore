# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*.pyo

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Environment variables
backend/.env
frontend/.env.local
frontend/.env

# Dependencies
## Ignore all node_modules folders anywhere in the project
node_modules/

## Python specific
backend/__pycache__/
backend/venv/
backend/.venv/
backend/env/
backend/ENV/
backend/activate_this.py

# Build artifacts
## Next.js build output
frontend/.next/
frontend/out/

## Other common build/dist folders
build/
dist/
*.egg-info/

# Environment variables - Keep these specific if needed
# or use a more general pattern if they always follow a naming convention
backend/.env
frontend/.env
frontend/.env.local
frontend/.env.*.local
*.env

# OS generated files
.DS_Store
Thumbs.db
._*

# IDE / Editor specific
.vscode/
# .idea/
# *.sublime-project
# *.sublime-workspace

# Log files
*.log
logs/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Coverage directory
coverage/
.nyc_output/

# Compiled Python files
*.pyc
*.pyo

# Python Virtual Environments
# Ensure these are specific to backend if that's the only place they should be
backend/venv/
backend/.venv/
backend/env/
backend/ENV/
backend/activate_this.py # Often found in older virtualenv setups

# Backend Specific
backend/temp_uploaded_files/

# Environment variables - IMPORTANT: Contains sensitive keys
# Generic .env catch-all
.env
# Specific .env files for frontend and backend
frontend/.env
frontend/.env.local
frontend/.env.*.local # Catches .env.development.local, .env.production.local etc.
backend/.env

# Node.js Dependencies (should be specific to frontend if possible)
# If node_modules can only exist in frontend:
frontend/node_modules/
# If node_modules could exist elsewhere (e.g. root for some tools), then broader:
# node_modules/

# Next.js (Frontend)
frontend/.next/
frontend/out/

# Build artifacts / Distribution
build/
dist/

# OS generated files
.DS_Store
._*
Thumbs.db

# IDE / Editor specific (examples)
.vscode/
# .idea/ # Uncomment if you use JetBrains IDEs and want to ignore project-specific settings

# Log files
*.log
logs/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Coverage reports
coverage/
.coverage
.coverage.*
htmlcov/
.nyc_output/

# Other common ignores from your existing file (selectively kept)
*.so
.Python
develop-eggs/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
.tox/
.nox/
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
*.mo
*.pot
local_settings.py # Django specific
db.sqlite3          # Django specific
db.sqlite3-journal # Django specific
instance/           # Flask specific
.webassets-cache    # Flask specific
.scrapy             # Scrapy specific
docs/_build/        # Sphinx specific
.pybuilder/
_target/ # pybuilder target, also common for other build systems
.ipynb_checkpoints
profile_default/    # IPython specific
ipython_config.py   # IPython specific
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.spyderproject
.spyproject
.ropeproject
/site               # mkdocs specific
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/
.ruff_cache/
.pypirc
.pdm.toml
.pdm-python
.pdm-build/
